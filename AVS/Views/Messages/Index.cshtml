@using AVS.Models.UserModels

@model Message;
@{
    ViewData["Title"] = "Диалог";
    var senderId = ViewBag.Sender.Id;
}

<div class="personal_info">
    <div class="personal_info_container">
        <img class="userLogo" src="https://demotivation.ru/wp-content/uploads/2020/09/vindiesel156919.jpg" />
        <p><span>@ViewBag.Sender.Name</span> <span>@ViewBag.Sender.SecondName</span></p>
    </div>
    <hr>
    <div class="pesronal_settings">
        <a asp-controller="PersonalAccount" asp-action="Index">Мои сообщения</a>
        <a asp-controller="PersonalAccount" asp-action="MyAdvertisements">Мои объявления</a>
        <a asp-controller="Advertisement" asp-action="CreateAdvertisement">Создать объявление</a>
        <a asp-controller="PersonalAccount" asp-action="UserEditor">Редактировать</a>
        <a asp-controller="PersonalAccount" asp-action="Logout">Выйти</a>
    </div>
</div>
<div class="chats_container">
    <div class="chat_discription_container">
        <div class="chat_container">
            <div class="userSenderLogo">
                <img src="https://demotivation.ru/wp-content/uploads/2020/09/vindiesel156919.jpg" />
            </div>
            <div class="chat_discription">
                <p>
                    <span>@ViewBag.Recipient.Name</span> <span>@ViewBag.Recipient.SecondName</span>
                </p>

                <a href="tel:@ViewBag.Recipient.NumberPhone">
                    Позвонить: @ViewBag.Recipient.NumberPhone
                </a>
            </div>
        </div>
    </div>
    <content>
        <div class="dialog_container">
            <div class="row">
                <div>
                    <div class="card">
                        <div id="srl" class="card-body chat-care">
                            <ul id="chat" class="chat">
                                @foreach (Message message in ViewBag.Messages)
                                {
                                    if (message.SenderUserId == ViewBag.Sender.Id)
                                    {
                                        <li class="admin clearfix">
                                            <div class="chat-body clearfix">
                                                <div class="header clearfix">
                                                    <strong class="primary-font">@message.SenderUser.Name</strong>
                                                    <small class="right text-muted">
                                                        <span class="glyphicon glyphicon-time"></span>@message.CreatedAt?.ToString("dd.MM.yy, HH:mm")
                                                    </small>
                                                </div>
                                                <p>
                                                    @message.Content
                                                </p>
                                            </div>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="agent clearfix">
                                            <div class="chat-body clearfix">
                                                <div class="header clearfix">
                                                    <strong class="right primary-font">@message.SenderUser.Name</strong>
                                                    <small class="left text-muted"><span class="glyphicon glyphicon-time"></span>@message.CreatedAt?.ToString("dd.MM.yy, HH:mm")</small>
                                                </div>
                                                <p>
                                                    @message.Content
                                                </p>
                                            </div>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                        <div class="card-footer">
                            @Html.AntiForgeryToken()
                            <form id="messageForm" asp-controller="Messages" asp-action="PostMessage" method="post">
                                <input type="hidden" name="userId" value="@ViewBag.Recipient.Id" />
                                <div class="input-group">
                                    <textarea asp-for="Content"
                                              id="btn-input"
                                              class="form-control input-sm"
                                              placeholder="Type your message here..."
                                              rows="1"
                                              style="overflow: hidden; resize: none;"></textarea>
                                    <span class="input-group-btn">
                                        <button type="submit" class="btn btn-primary" id="btn-chat">Send</button>
                                    </span>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </content>
</div>

@section Scripts {
    <script>
        function validateTextarea() {
            const textarea = document.getElementById('btn-input');
            const pattern = /^(?!^ )(?!.*\s{2,})(?=.*[A-Za-zА-Яа-яЁё])(?!.*([!@@#\$%\^&\*\(\)_\+\[\]\{\};:'"\|\\,.<>\/?])\1{3})[A-Za-zА-Яа-яЁё0-9\s\-!@@#\$%\^&\*\(\)_\+\[\]\{\};:'"\|\\,.<>\/?]*$/;
            const isValid = pattern.test(textarea.value);
            if (!isValid) {
                textarea.setCustomValidity('Должны быть русские или английские буквы, цифры, не более одного пробела подряд и пробел не может быть первым символом. Одиночный пробел не допускается.');
            } else {
                textarea.setCustomValidity('');
            }
        }

        function autoResizeTextarea() {
            const textarea = document.getElementById("btn-input");
            const maxHeight = 150;

            textarea.addEventListener("input", function () {
                this.style.height = "auto";

                const newHeight = this.scrollHeight;

                if (newHeight > maxHeight) {
                    this.style.height = maxHeight + "px"; 
                    this.style.overflowY = "scroll"; 
                } else {
                    this.style.height = newHeight + "px"; 
                    this.style.overflowY = "hidden"; 
                }
            });
        }

        autoResizeTextarea();

        function scrollToBottom() {
            const chat = document.getElementById("srl");
            chat.scrollTop = chat.scrollHeight;
        }

        function fetchMessages() {
            const userId = document.querySelector('input[name="userId"]').value;
            fetch(`/Messages/GetMessages?userId=${userId}`)
                .then(response => response.json())
                .then(data => {
                    const chat = document.getElementById("chat");
                    chat.innerHTML = '';
                    data.forEach(message => {
                        const li = document.createElement("li");
                        li.className = message.senderUserId === '@senderId' ? "admin clearfix" : "agent clearfix";

                        const divBody = document.createElement("div");
                        divBody.className = "chat-body clearfix";

                        const divHeader = document.createElement("div");
                        divHeader.className = "header clearfix";

                        const strong = document.createElement("strong");
                        strong.className = "primary-font";
                        strong.textContent = message.senderUser.name;

                        const small = document.createElement("small");
                        small.className = message.senderUserId === '@senderId' ? "right text-muted" : "left text-muted";
                        small.innerHTML = `
                        <span class="glyphicon glyphicon-time"></span>${new Date(message.createdAt).toLocaleString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit' })}`;

                        const p = document.createElement("p");
                        p.textContent = message.content;

                        divHeader.appendChild(strong);
                        divHeader.appendChild(small);
                        divBody.appendChild(divHeader);
                        divBody.appendChild(p);
                        li.appendChild(divBody);
                        chat.appendChild(li);
                    });
                })
                .catch(error => console.error('Ошибка при обновлении сообщений:', error));
        }

        document.addEventListener("DOMContentLoaded", function () {
            scrollToBottom();
        });

        setInterval(fetchMessages, 5000);
    </script>
}
