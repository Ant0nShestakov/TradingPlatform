@using AVS.Models.AddressModels
@using AVS.Models.AdvertisementModels;
@model Advertisement;
@{
    ViewData["Title"] = "Создание объявления";
}

<div class="personal_info">
    <div class="personal_info_container">
        <img class="userLogo" src="https://demotivation.ru/wp-content/uploads/2020/09/vindiesel156919.jpg" />
        <p><span>@ViewBag.User.Name</span> <span>@ViewBag.User.SecondName</span></p>
    </div>
    <hr>
    <div class="pesronal_settings">
        <a asp-controller="PersonalAccount" asp-action="Index">Мои сообщения</a>
        <a asp-controller="PersonalAccount" asp-action="MyAdvertisements">Мои объявления</a>
        <a asp-controller="Advertisement" asp-action="CreateAdvertisement">Создать объявление</a>
        <a asp-controller="PersonalAccount" asp-action="Logout">Выйти</a>
    </div>
</div>
<div class="chats_container">
    <h1>Создание объявления</h1>
    <content>
        <form asp-controller="Advertisement" asp-action="AddAdvertisement" method="post" enctype="multipart/form-data">
            <div>
                <label for="tittle">Название объявления</label>
                <input id="tittle" type="text" asp-for="Title" class="form-control" required/>
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div>
                <label for="categories">Категории</label>
                <select id="categories" asp-for="CategoryId" class="form-control" required>
                    <option value="">Выберите категорию</option>
                    @foreach (Category category in ViewBag.Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>

            <div>
                <label for="discription">Описание объявления</label>
                <textarea id="btn-input"
                          class="form-control input-sm"
                          placeholder="Type your message here..."
                          rows="1"
                          style="overflow: hidden; resize: none;"
                          asp-for="Description" required></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div>
                <label for="price">Цена товара, руб.</label>
                <input id="price" type="text" asp-for="Price" class="form-control" pattern="^\d+(\.\d{1,2})?$" 
                title="Введите число либо целое, либо с двумя знаками после точки" required/>

                <span asp-validation-for="Price" class="text-danger"></span>
            </div>

            <div>
                <label for="images">Изображения</label>
                <input type="file" id="images" name="Images" class="form-control" multiple accept=".png, .jpg, .jpeg" />
                <div id="image-preview"></div>
            </div>

            <button type="button" id="add-image" class="form-control">Добавить еще изображение</button>

            <div>
                <label for="country">Страна:</label>
                <select id="country" asp-for="Address.Street.Locality.Region.CountryID" class="form-control" required>
                    <option value="">Выберите страну</option>
                    @foreach (Country items in ViewBag.Country)
                    {
                        <option value="@items.Id">@items.Name</option>
                    }
                </select>
                <span asp-validation-for="Address.Street.Locality.Region.CountryID"></span>
            </div>

            <div id="regionContainer" style="display: none;">
                <label for="region">Регион:</label>
                <select id="region" asp-for="Address.Street.Locality.RegionID" class="form-control" required>
                </select>
            </div>

            <div id="localityContainer" style="display: none;">
                <label for="locality">Город:</label>
                <select id="locality" asp-for="Address.Street.LocalityID" class="form-control" required>
                </select>
            </div>

            <div id="streetContainer" style="display: none;">
                <label for="street">Улица:</label>
                <select id="street" asp-for="Address.StreetID" class="form-control" required>
                </select>
            </div>

            <div id="addressDetails" style="display: none;">
                <div>
                    <label for="houseNumber">Номер дома:</label>
                    <input type="number" id="houseNumber" asp-for="Address.HouseNumber" class="form-control" required/>
                </div>

                <div>
                    <label for="entrance">Подъезд:</label>
                    <input type="number" id="entrance" asp-for="Address.Entrance" class="form-control" required />
                </div>

                <div>
                    <label for="floor">Этаж:</label>
                    <input type="number" id="floor" asp-for="Address.Floor" class="form-control" required />
                </div>

                <div>
                    <label for="flatNumber">Номер квартиры:</label>
                    <input type="number" id="flatNumber" asp-for="Address.FlatNumber" class="form-control" required />
                </div>
            </div>

            <button type="submit" class="form-control">Создать объявление</button>
        </form>
    </content>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            function autoResizeTextarea() {
                const textarea = document.getElementById("btn-input");
                const maxHeight = 150;

                textarea.addEventListener("input", function () {
                    this.style.height = "auto";

                    const newHeight = this.scrollHeight;

                    if (newHeight > maxHeight) {
                        this.style.height = maxHeight + "px";
                        this.style.overflowY = "scroll";
                    } else {
                        this.style.height = newHeight + "px";
                        this.style.overflowY = "hidden";
                    }
                });
            }

            autoResizeTextarea();

            function clearSelect(selectId) {
                $(selectId).empty();
            }

            function hideContainers() {
                $('#regionContainer').hide();
                $('#localityContainer').hide();
                $('#streetContainer').hide();
                $('#addressDetails').hide();
            }

            hideContainers();

            $('#country').change(function () {
                var countryId = $(this).val();
                clearSelect('#region');
                clearSelect('#locality');
                clearSelect('#street');

                if (countryId) {
                    $.ajax({
                        url: '/Advertisement/GetRegions',
                        type: 'GET',
                        data: { id: countryId },
                        success: function (data) {
                            $('#region').append($('<option>', {
                                value: '',
                                text: 'Select Region'
                            }));
                            $.each(data, function (index, region) {
                                $('#region').append($('<option>', {
                                    value: region.id,
                                    text: region.name
                                }));
                            });
                            $('#regionContainer').show();
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching regions:', error);
                        }
                    });
                } else {
                    hideContainers();
                }
            });

            $('#region').change(function () {
                var regionId = $(this).val();
                clearSelect('#locality');
                clearSelect('#street');
                $('#addressDetails').hide();

                if (regionId) {
                    $.ajax({
                        url: '/Advertisement/GetLocalities',
                        type: 'GET',
                        data: { id: regionId },
                        success: function (data) {
                            $('#locality').append($('<option>', {
                                value: '',
                                text: 'Select Locality'
                            }));
                            $.each(data, function (index, locality) {
                                $('#locality').append($('<option>', {
                                    value: locality.id,
                                    text: locality.name
                                }));
                            });
                            $('#localityContainer').show();
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching localities:', error);
                        }
                    });
                } else {
                    hideContainers();
                }
            });

            $('#locality').change(function () {
                var localityId = $(this).val();
                clearSelect('#street');
                $('#addressDetails').hide();

                if (localityId) {
                    $.ajax({
                        url: '/Advertisement/GetStreets',
                        type: 'GET',
                        data: { id: localityId },
                        success: function (data) {
                            $('#street').append($('<option>', {
                                value: '',
                                text: 'Select Street'
                            }));
                            $.each(data, function (index, street) {
                                $('#street').append($('<option>', {
                                    value: street.id,
                                    text: street.name
                                }));
                            });
                            $('#streetContainer').show();
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching streets:', error);
                        }
                    });
                } else {
                    hideContainers();
                }
            });

            $('#street').change(function () {
                var streetId = $(this).val();
                if (streetId) {
                    $('#addressDetails').show();
                } else {
                    $('#addressDetails').hide();
                }
            });

            // Добавление обработчика события change для первого поля выбора изображений
            $('#images').change(function () {
                var validExtensions = ['.png', '.jpg', '.jpeg'];
                var maxFileSizeMB = 5; // Максимальный размер файла в мегабайтах
                var isValid = true;

                $.each(this.files, function (index, file) {
                    var fileName = file.name;
                    var fileSizeMB = file.size / (1024 * 1024); // Переводим размер файла в мегабайты
                    var fileExtension = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();

                    // Проверяем тип и размер файла
                    if ($.inArray(fileExtension, validExtensions) === -1) {
                        alert("Недопустимый тип файла. Разрешены только файлы PNG, JPG и JPEG.");
                        isValid = false;
                        return false; // Прерываем цикл
                    } else if (fileSizeMB > maxFileSizeMB) {
                        alert("Превышен максимально допустимый размер файла (" + maxFileSizeMB + " MB).");
                        isValid = false;
                        return false; // Прерываем цикл
                    }
                });

                // Если хотя бы один файл недопустим, очистить поле ввода файлов
                if (!isValid) {
                    $(this).val('');
                }

                $('#image-preview').empty();
                var input = this;
                if (input.files) {
                    $.each(input.files, function (index, file) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $('#image-preview').append(
                                '<img src="' + e.target.result + '" width="100" height="100" />'
                            );
                        };
                        reader.readAsDataURL(file);
                    });
                }
            });

            // Добавление обработчика клика по кнопке "Добавить еще изображение"
            $('#add-image').click(function () {
                $('#image-preview').append(
                    '<input type="file" class="form-control" multiple name="Images" accept=".png, .jpg, .jpeg" /><br/>'
                );

                // Добавление обработчика изменения для нового поля
                $('input[type=file]').last().change(function () {
                    var validExtensions = ['.png', '.jpg', '.jpeg'];
                    var maxFileSizeMB = 5; // Максимальный размер файла в мегабайтах
                    var isValid = true;

                    $.each(this.files, function (index, file) {
                        var fileName = file.name;
                        var fileSizeMB = file.size / (1024 * 1024); // Переводим размер файла в мегабайты
                        var fileExtension = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();

                        // Проверяем тип и размер файла
                        if ($.inArray(fileExtension, validExtensions) === -1) {
                            alert("Недопустимый тип файла. Разрешены только файлы PNG, JPG и JPEG.");
                            isValid = false;
                            return false; // Прерываем цикл
                        } else if (fileSizeMB > maxFileSizeMB) {
                            alert("Превышен максимально допустимый размер файла (" + maxFileSizeMB + " MB).");
                            isValid = false;
                            return false; // Прерываем цикл
                        }
                    });

                    // Если хотя бы один файл недопустим, очистить поле ввода файлов
                    if (!isValid) {
                        $(this).val('');
                    }

                    var input = this;
                    if (input.files) {
                        $.each(input.files, function (index, file) {
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                $('#image-preview').append(
                                    '<img src="' + e.target.result + '" width="100" height="100" />'
                                );
                            };
                            reader.readAsDataURL(file);
                        });
                    }
                });
            });
        });
    </script>
}
